# -*- coding: utf-8 -*-
"""TBL06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ZKgBpbJDI6Ewk1Zrg-gsxwL0vJUU-SP
"""

# Renan Belem Biavati

# Sua tarefa será gerar a matriz termo-documento usando TF-IDF por meio da aplicação das 
# fórmulas  TF-IDF  na  matriz  termo-documento  criada  com  a  utilização  do  algoritmo  Bag of 
# Words. Sobre o Corpus que recuperamos anteriormente. O entregável desta tarefa é uma 
# matriz termo-documento onde a primeira linha são os termos e as linhas subsequentes são 
# os vetores calculados com o TF-IDF. 

# 2. Sua tarefa será gerar uma matriz de distância, computando o cosseno do ângulo entre todos 
# os vetores que encontramos usando o tf-idf. Para isso use a seguinte fórmula para o cálculo 
# do  cosseno  use  a  fórmula  apresentada  em  Word2Vector  (frankalcantara.com) 
# (https://frankalcantara.com/Aulas/Nlp/out/Aula4.html#/0/4/2)  e  apresentada  na  figura  a 
# seguir:  

from tabulate import tabulate
from bs4 import BeautifulSoup
import requests
import string
import re
import numpy as np

site= []
site.append('https://www.linguamatics.com/what-text-mining-text-analytics-and-natural-language-processing')
site.append('https://en.wikipedia.org/wiki/Natural_language_processing')
site.append('https://www.ibm.com/cloud/learn/natural-language-processing')
site.append('https://developer.apple.com/documentation/naturallanguage')
site.append('https://www.techtarget.com/searchenterpriseai/definition/natural-language-processing-NLP')

textoSite= []
vcb= set()
palavras= []

for url in site:
  html= requests.get(url)
  texto= BeautifulSoup(html.text, "html.parser")
  for sentenca in texto.find_all("p"):
    sentenca= sentenca.get_text().translate(str.maketrans('', '', string.punctuation))
    textoSite.append(sentenca)

for texto in textoSite:
  palavras.append(texto.split())

texto= palavras

for sentenca in texto:
  for palavra in sentenca:
    vcb.add(palavra)

#BAG OF WORDS
matriz= []
for sentenca in texto:
  vetor= []
  for palavra in vcb:
    if palavra in sentenca:
      vetor.append(sentenca.count(palavra))
    else:
      vetor.append(0)
  matriz.append(vetor)

#TF
matrizTF= []
for sentenca in texto:
  vetor= []
  tamSentenca= len(sentenca)
  for palavra in vcb:
    if palavra in sentenca:
      vetor.append(sentenca.count(palavra)/tamSentenca)
    else:
      vetor.append(0)
  matrizTF.append(vetor)

#IDF
matrizIDF= []
vetor= []
nTextos= len(texto)
for palavra in vcb:
  contador= 0
  for sentenca in texto:
    if palavra in sentenca:
      contador= contador+1
  vetor.append(np.log(nTextos/contador))
matrizIDF.append(vetor)

print("TF-IDF -> ")
matrizTF_IDF= []
for linhaTF in matrizTF:
  vetorTF_IDF= []
  for i in range(len(linhaTF)):
    vetorTF_IDF.append(linhaTF[i])
  matrizTF_IDF.append(vetorTF_IDF)
print(tabulate(matrizTF_IDF, headers=vcb))

print("Similaridade dos Cossenos: ")
matrizCos= []
titulo= [] 
i= 1
for a in matrizTF:
  titulo.append("Vetor" + str(i))
  vetorCos= []
  for b in matrizTF:
    cos_sim= np.dot(a,b)/(np.linalg.norm(a)*np.linalg.norm(b))
    vetorCos.append(cos_sim)
  matrizCos.append(vetorCos)
  i= i + 1

print(tabulate(matrizCos, headers=titulo))